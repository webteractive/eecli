#!/usr/bin/env php
<?php

require __DIR__.'/vendor/autoload.php';

use GuzzleHttp\Client;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

class GitHub
{
  public $repo;
  public $vendor;
  public $branch;
  public $version;

  public function __construct($addon) {
    [$vendor, $repo] = explode('/', $addon);

    if (strpos($repo, '@')) {
      [$repo, $version] = explode('@', $repo);
      $this->repo = $repo;
      $this->version = $version;
    } else if (strpos($repo, ':')) {
      [$repo, $branch] = explode(':', $repo);
      $this->repo = $repo;
      $this->branch = $branch;
    } else {
      $this->repo = $repo;
    }
    $this->vendor = $vendor;
  }

  public function getZipFileUrl()
  {
    return join('', [
      "https://github.com/{$this->vendor}/{$this->repo}/archive/",
      $this->getZipFile()
    ]);

  }

  public function getZipFile()
  {
    if (strpos($this->repo, '@')) {
      return $this->version . '.zip';
    } else if (strpos($this->repo, ':')) {
      return $this->branch . '.zip';
    }

    $request = (new Client())->get("https://api.github.com/repos/{$this->vendor}/{$this->repo}/releases/latest");
    $latest = json_decode($request->getBody());

    return "{$latest->tag_name}.zip";
  }

}

class GitHubAddonDownloader
{
  protected $fs;
  protected $addon;

  public function __construct($addon) {
    $this->addon = new GitHub($addon);
    $this->fs = new Filesystem();
  }

  public function download()
  {
    $this->makeDir(__DIR__ . '/ee_temp');

    $response = (new Client)->get($this->addon->getZipFileUrl());

    file_put_contents(__DIR__ . '/ee_temp/' . $this->addon->getZipFile(), $response->getBody());

    print_r($this->addon->getZipFileUrl());  
  }

  public function makeDir($dir)
  {
    if (! $this->fs->exists($dir)) {
      $this->fs->mkdir($dir);
    }

    return $this->fs->exists($dir);
  }
}

class InstallAddonCommand extends Command
{
  protected static $defaultName = 'addon:install';

  protected $downloaders = [
    'github' => GitHubAddonDownloader::class
  ];

  protected function configure()
  {
    $this->setDescription('Install addon')
        ->addArgument('addon', InputArgument::REQUIRED, 'The name of the addon that you want to install. This should be in a format vendor/addon_name.')
        ->addOption('source', null, InputOption::VALUE_REQUIRED, 'Where should we look for the addon that you want to install', 'github');
  }

  protected function execute(InputInterface $input, OutputInterface $output)
  {
    $addon = $input->getArgument('addon');
    $source = $input->getOption('source');
    $source = $input->getOption('source');

    $downloader = new $this->downloaders[$source]($addon);
    $downloader->download();

    // $downloader = new GitHubAddonDownloader($input->getArgument('addon'), $input->getOption('source'));

    
    $output->writeln('Addon: ' . $addon);
    $output->writeln('Source: ' . $source);
    return 0;
  }
}

$app = new Application('ExpressionEngine CLI', '1.0.0');
$app->add(new InstallAddonCommand);
$app->run();